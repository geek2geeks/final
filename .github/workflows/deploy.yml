name: Deploy

on:
  push:
    branches: [main, develop, 'feature/*']
  pull_request:
    types: [opened, synchronize, reopened, closed]

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm --filter api exec prisma generate

      - name: Build web app
        run: pnpm --filter web build

      - name: Deploy to Vercel (Preview)
        if: github.ref != 'refs/heads/main'
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./apps/web
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Deploy to Vercel (Production)
        if: github.ref == 'refs/heads/main'
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./apps/web
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}

  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm --filter api exec prisma generate

      - name: Build API
        run: pnpm --filter api build

      - name: Deploy to Heroku (Review App)
        if: github.event_name == 'pull_request'
        uses: akhileshns/heroku-deploy@v3.12.14
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: "quizztok-api-pr-${{ github.event.number }}"
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          appdir: "apps/api"
          usedocker: false

      - name: Deploy to Heroku (Staging)
        if: github.ref == 'refs/heads/develop'
        uses: akhileshns/heroku-deploy@v3.12.14
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_STAGING_APP_NAME }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          appdir: "apps/api"
          usedocker: false

      - name: Deploy to Heroku (Production)
        if: github.ref == 'refs/heads/main'
        uses: akhileshns/heroku-deploy@v3.12.14
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_PRODUCTION_APP_NAME }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          appdir: "apps/api"
          usedocker: false

  cleanup-preview:
    name: Cleanup Preview Deployments
    runs-on: ubuntu-latest
    if: github.event.action == 'closed' && github.event_name == 'pull_request'

    steps:
      - name: Delete Heroku Review App
        uses: akhileshns/heroku-deploy@v3.12.14
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: "quizztok-api-pr-${{ github.event.number }}"
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          justlogin: true
        continue-on-error: true

      - name: Delete Heroku App
        run: |
          curl -n -X DELETE https://api.heroku.com/apps/quizztok-api-pr-${{ github.event.number }} \
            -H "Content-Type: application/json" \
            -H "Accept: application/vnd.heroku+json; version=3" \
            -H "Authorization: Bearer ${{ secrets.HEROKU_API_KEY }}"
        continue-on-error: true

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    if: always() && github.event.action != 'closed'

    steps:
      - name: Notify Success
        if: needs.deploy-frontend.result == 'success' && needs.deploy-backend.result == 'success'
        run: |
          echo "✅ Deployment successful!"
          echo "Frontend: Deployed to Vercel"
          echo "Backend: Deployed to Heroku"

      - name: Notify Failure
        if: needs.deploy-frontend.result == 'failure' || needs.deploy-backend.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          echo "Frontend status: ${{ needs.deploy-frontend.result }}"
          echo "Backend status: ${{ needs.deploy-backend.result }}"