// QuizzTok Database Schema
// PostgreSQL with Prisma ORM

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SubscriptionTier {
  free
  pro
  enterprise
}

enum Difficulty {
  Facil  @map("Fácil")
  Medio  @map("Médio")
  Dificil @map("Difícil")
}

enum CorrectAnswer {
  A
  B
  C
  D
}

model User {
  id                 String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkId            String            @unique @map("clerk_id") @db.VarChar(255)
  email              String            @unique @db.VarChar(255)
  username           String?           @unique @db.VarChar(100)
  tiktokUsername     String?           @map("tiktok_username") @db.VarChar(100)
  subscriptionTier   SubscriptionTier  @default(free) @map("subscription_tier")
  subscriptionStatus String?           @map("subscription_status") @db.VarChar(50)
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime          @default(now()) @updatedAt @map("updated_at")

  // Relations
  quizzes         Quiz[]
  analyticsEvents AnalyticsEvent[]

  @@index([clerkId], name: "idx_users_clerk_id")
  @@index([subscriptionTier, subscriptionStatus], name: "idx_users_subscription")
  @@map("users")
}

model Question {
  id            Int           @id @default(autoincrement())
  text          String        @db.Text
  optionA       String        @map("option_a") @db.VarChar(255)
  optionB       String        @map("option_b") @db.VarChar(255)
  optionC       String        @map("option_c") @db.VarChar(255)
  optionD       String        @map("option_d") @db.VarChar(255)
  correctAnswer CorrectAnswer @map("correct_answer")
  difficulty    Difficulty
  category      String?       @db.VarChar(100)
  timesUsed     Int           @default(0) @map("times_used")
  createdAt     DateTime      @default(now()) @map("created_at")

  @@index([difficulty], name: "idx_questions_difficulty")
  @@map("questions")
}

model Quiz {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String    @map("user_id") @db.Uuid
  roomId            String?   @unique @map("room_id") @db.VarChar(100)
  title             String?   @db.VarChar(255)
  questionCount     Int?      @map("question_count")
  timePerQuestion   Int?      @map("time_per_question")
  status            String    @default("created") @db.VarChar(50)
  startedAt         DateTime? @map("started_at")
  endedAt           DateTime? @map("ended_at")
  createdAt         DateTime  @default(now()) @map("created_at")

  // Relations
  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  results QuizResult[]

  @@index([userId, status], name: "idx_quizzes_user_status")
  @@index([roomId], name: "idx_quizzes_room_id")
  @@map("quizzes")
}

model QuizResult {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  quizId           String   @map("quiz_id") @db.Uuid
  participantCount Int?     @map("participant_count")
  questionsAnswered Int?    @map("questions_answered")
  averageScore     Decimal? @map("average_score") @db.Decimal(10, 2)
  winnerUsername   String?  @map("winner_username") @db.VarChar(100)
  winnerScore      Int?     @map("winner_score")
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@map("quiz_results")
}

model AnalyticsEvent {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String?  @map("user_id") @db.Uuid
  eventType String   @map("event_type") @db.VarChar(100)
  eventData Json?    @map("event_data") @db.JsonB
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@index([userId, eventType], name: "idx_analytics_user_event")
  @@map("analytics_events")
}